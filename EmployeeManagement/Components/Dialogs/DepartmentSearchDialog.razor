@using EmployeeManagement.Domain.Models
@using EmployeeManagement.Domain.Enums
@using EmployeeManagement.Application.Interfaces
@using MudBlazor
@using Microsoft.Extensions.Logging
@inject IDepartmentSearchService DepartmentSearchService
@inject ILogger<DepartmentSearchDialog> Logger
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-width: 900px;">
            <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">
                üè¢ ÈÉ®ÈñÄÊ§úÁ¥¢
            </MudText>

            <!-- Ê§úÁ¥¢Êù°‰ª∂ -->
            <MudCard Elevation="2" Class="mb-4">
                <MudCardContent>
                    <MudText Typo="Typo.subtitle1" Color="Color.Primary" Class="mb-3">Ê§úÁ¥¢Êù°‰ª∂</MudText>
                    <MudGrid Spacing="3">
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="searchCriteria.DepartmentCode"
                                        Label="ÈÉ®ÈñÄ„Ç≥„Éº„Éâ"
                                        Variant="Variant.Outlined"
                                        Adornment="Adornment.Start"
                                        AdornmentIcon="@Icons.Material.Filled.Tag"
                                        Class="mb-2" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="searchCriteria.DepartmentName"
                                        Label="ÈÉ®ÈñÄÂêç"
                                        Variant="Variant.Outlined"
                                        Adornment="Adornment.Start"
                                        AdornmentIcon="@Icons.Material.Filled.Business"
                                        Class="mb-2" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="searchCriteria.ManagerName"
                                        Label="Ë≤¨‰ªªËÄÖÂêç"
                                        Variant="Variant.Outlined"
                                        Adornment="Adornment.Start"
                                        AdornmentIcon="@Icons.Material.Filled.Person"
                                        Class="mb-2" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudSelect @bind-Value="searchCriteria.DepartmentType"
                                     Label="ÈÉ®ÈñÄÁ®ÆÂà•"
                                     Variant="Variant.Outlined"
                                     AnchorOrigin="Origin.BottomCenter"
                                     Class="mb-2">
                                <MudSelectItem Value="@((Department?)null)">Ôºà„Åô„Åπ„Å¶Ôºâ</MudSelectItem>
                                @foreach (Department dept in Enum.GetValues<Department>())
                                {
                                    <MudSelectItem Value="@((Department?)dept)">@dept.ToDisplayName()</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudSelect @bind-Value="searchCriteria.IsActive"
                                     Label="ÊúâÂäπÁä∂ÊÖã"
                                     Variant="Variant.Outlined"
                                     AnchorOrigin="Origin.BottomCenter"
                                     Class="mb-2">
                                <MudSelectItem Value="@((bool?)null)">Ôºà„Åô„Åπ„Å¶Ôºâ</MudSelectItem>
                                <MudSelectItem Value="@((bool?)true)">ÊúâÂäπ</MudSelectItem>
                                <MudSelectItem Value="@((bool?)false)">ÁÑ°Âäπ</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudButton Variant="Variant.Filled"
                                     Color="Color.Primary"
                                     StartIcon="@Icons.Material.Filled.Search"
                                     OnClick="HandleSearch"
                                     Disabled="isSearching"
                                     FullWidth="true"
                                     Class="mt-1">
                                @if (isSearching)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                    <MudText Class="ms-2">Ê§úÁ¥¢‰∏≠...</MudText>
                                }
                                else
                                {
                                    <MudText>Ê§úÁ¥¢ÂÆüË°å</MudText>
                                }
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>

            <!-- Ê§úÁ¥¢ÁµêÊûú -->
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.subtitle1" Color="Color.Primary" Class="mb-3">
                        Ê§úÁ¥¢ÁµêÊûú (@searchResults.Count() ‰ª∂)
                    </MudText>

                    @if (isSearching)
                    {
                        <div class="d-flex justify-center pa-4">
                            <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
                        </div>
                    }
                    else if (!searchResults.Any())
                    {
                        <MudAlert Severity="Severity.Info">
                            Ë©≤ÂΩì„Åô„ÇãÈÉ®ÈñÄ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇÊ§úÁ¥¢Êù°‰ª∂„ÇíÂ§âÊõ¥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
                        </MudAlert>
                    }
                    else
                    {
                        <MudTable Items="@searchResults" 
                                  Hover="true" 
                                  Striped="true" 
                                  Dense="true"
                                  RowClass="cursor-pointer"
                                  OnRowClick="OnRowClick"
                                  T="DepartmentMaster"
                                  RowClassFunc="@GetRowClass">
                            <HeaderContent>
                                <MudTh>ÈÉ®ÈñÄ„Ç≥„Éº„Éâ</MudTh>
                                <MudTh>ÈÉ®ÈñÄÂêç</MudTh>
                                <MudTh>Ë≤¨‰ªªËÄÖ</MudTh>
                                <MudTh>ÈÉ®ÈñÄÁ®ÆÂà•</MudTh>
                                <MudTh>ÂÜÖÁ∑öÁï™Âè∑</MudTh>
                                <MudTh>ÊúâÂäπ</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="ÈÉ®ÈñÄ„Ç≥„Éº„Éâ">
                                    <div class="d-flex align-center">
                                        <MudIcon Icon="@Icons.Material.Filled.Tag" 
                                               Size="Size.Small" 
                                               Class="mr-2" />
                                        <strong>@context.DepartmentCode</strong>
                                    </div>
                                </MudTd>
                                <MudTd DataLabel="ÈÉ®ÈñÄÂêç">
                                    <div class="d-flex align-center">
                                        <MudIcon Icon="@Icons.Material.Filled.Business" 
                                               Size="Size.Small" 
                                               Class="mr-2" />
                                        @context.DepartmentName
                                    </div>
                                </MudTd>
                                <MudTd DataLabel="Ë≤¨‰ªªËÄÖ">
                                    @if (!string.IsNullOrEmpty(context.ManagerName))
                                    {
                                        <div class="d-flex align-center">
                                            <MudIcon Icon="@Icons.Material.Filled.Person" 
                                                   Size="Size.Small" 
                                                   Class="mr-2" />
                                            @context.ManagerName
                                            @if (!string.IsNullOrEmpty(context.ManagerEmployeeNumber))
                                            {
                                                <MudText Typo="Typo.caption" Class="ml-1">
                                                    (@context.ManagerEmployeeNumber)
                                                </MudText>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.caption" Color="Color.Default">
                                            Êú™Ë®≠ÂÆö
                                        </MudText>
                                    }
                                </MudTd>
                                <MudTd DataLabel="ÈÉ®ÈñÄÁ®ÆÂà•">
                                    <MudChip T="string"
                                           Label="true" 
                                           Size="Size.Small"
                                           Color="Color.Info">
                                        @context.DepartmentType.ToDisplayName()
                                    </MudChip>
                                </MudTd>
                                <MudTd DataLabel="ÂÜÖÁ∑öÁï™Âè∑">
                                    @if (!string.IsNullOrEmpty(context.Extension))
                                    {
                                        <div class="d-flex align-center">
                                            <MudIcon Icon="@Icons.Material.Filled.Phone" 
                                                   Size="Size.Small" 
                                                   Class="mr-1" />
                                            @context.Extension
                                        </div>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.caption" Color="Color.Default">
                                            -
                                        </MudText>
                                    }
                                </MudTd>
                                <MudTd DataLabel="ÊúâÂäπ">
                                    <MudSwitch @bind-Value="context.IsActive" 
                                             ReadOnly="true"
                                             Color="@(context.IsActive ? Color.Success : Color.Default)" />
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    }
                </MudCardContent>
            </MudCard>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" 
                 Variant="Variant.Outlined" 
                 Color="Color.Secondary">
            „Ç≠„É£„É≥„Çª„É´
        </MudButton>
        <MudButton OnClick="@(() => SelectDepartment(selectedDepartment))" 
                 Variant="Variant.Filled" 
                 Color="Color.Primary"
                 Disabled="@(selectedDepartment == null)">
            ÈÅ∏Êäû
        </MudButton>
    </DialogActions>
</MudDialog>

<style>
    .cursor-pointer {
        cursor: pointer;
    }
    
    .selected-row {
        background-color: var(--mud-palette-action-selected) !important;
    }
</style>

@code {
    private DepartmentSearchCriteria searchCriteria = new();
    private List<DepartmentMaster> searchResults = new();
    private DepartmentMaster? selectedDepartment;
    private bool isSearching = false;

    [CascadingParameter] public MudBlazor.IMudDialogInstance? MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("DepartmentSearchDialog initializing - MudDialog reference: {IsNull}", 
            MudDialog == null ? "NULL" : "OK");
            
        try
        {
            // ÂàùÊúüË°®Á§∫„Åß„ÅØÊúâÂäπ„Å™ÈÉ®ÈñÄ„ÅÆ„Åø„ÇíË°®Á§∫
            searchCriteria.IsActive = true;
            await HandleSearch();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "DepartmentSearchDialogÂàùÊúüÂåñ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü");
            Snackbar.Add("ÂàùÊúüÂåñ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ", Severity.Error);
        }
    }

    /// <summary>
    /// Ê§úÁ¥¢ÂÆüË°å
    /// </summary>
    private async Task HandleSearch()
    {
        try
        {
            isSearching = true;
            selectedDepartment = null;
            StateHasChanged();

            Logger.LogDebug("ÈÉ®ÈñÄÊ§úÁ¥¢ÂÆüË°å: {@SearchCriteria}", searchCriteria);

            var results = await DepartmentSearchService.SearchDepartmentsAsync(searchCriteria);
            searchResults = results.ToList();

            Logger.LogDebug("ÈÉ®ÈñÄÊ§úÁ¥¢ÂÆå‰∫Ü: ÁµêÊûú‰ª∂Êï∞={Count}", searchResults.Count);

            if (searchResults.Count == 0)
            {
                Snackbar.Add("Ë©≤ÂΩì„Åô„ÇãÈÉ®ÈñÄ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ", Severity.Info);
            }
            else
            {
                Snackbar.Add($"{searchResults.Count}‰ª∂„ÅÆÈÉ®ÈñÄ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü„ÄÇ", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "ÈÉ®ÈñÄÊ§úÁ¥¢‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü");
            Snackbar.Add("Ê§úÁ¥¢‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ", Severity.Error);
            searchResults.Clear();
        }
        finally
        {
            isSearching = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Ë°å„ÇØ„É™„ÉÉ„ÇØÊôÇ„ÅÆÂá¶ÁêÜ
    /// </summary>
    /// <param name="tableRowClickEventArgs">Ë°å„ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„ÉàÂºïÊï∞</param>
    private void OnRowClick(TableRowClickEventArgs<DepartmentMaster> tableRowClickEventArgs)
    {
        try
        {
            var clickedDepartment = tableRowClickEventArgs.Item;
            
            if (clickedDepartment != null)
            {
                selectedDepartment = selectedDepartment?.DepartmentCode == clickedDepartment.DepartmentCode 
                    ? null // Âêå„ÅòË°å„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„ÅüÂ†¥Âêà„ÅØÈÅ∏ÊäûËß£Èô§
                    : clickedDepartment; // Áï∞„Å™„ÇãË°å„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„ÅüÂ†¥Âêà„ÅØÈÅ∏Êäû

                Logger.LogDebug("ÈÉ®ÈñÄÈÅ∏Êäû: {DepartmentCode} - {DepartmentName}", 
                    selectedDepartment?.DepartmentCode, selectedDepartment?.DepartmentName);
                    
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Ë°å„ÇØ„É™„ÉÉ„ÇØÂá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü");
            Snackbar.Add("ÈÅ∏ÊäûÂá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ", Severity.Error);
        }
    }

    /// <summary>
    /// Ë°å„ÅÆCSS„ÇØ„É©„Çπ„ÇíÂèñÂæó
    /// </summary>
    /// <param name="department">ÈÉ®ÈñÄ„Éû„Çπ„Çø</param>
    /// <param name="rowNumber">Ë°åÁï™Âè∑</param>
    /// <returns>CSS„ÇØ„É©„ÇπÂêç</returns>
    private string GetRowClass(DepartmentMaster department, int rowNumber)
    {
        if (selectedDepartment != null && selectedDepartment.DepartmentCode == department.DepartmentCode)
        {
            return "selected-row";
        }
        return string.Empty;
    }

    /// <summary>
    /// ÈÉ®ÈñÄÈÅ∏ÊäûÂá¶ÁêÜ
    /// </summary>
    /// <param name="department">ÈÅ∏Êäû„Åï„Çå„ÅüÈÉ®ÈñÄ</param>
    private void SelectDepartment(DepartmentMaster? department)
    {
        try
        {
            if (department != null && MudDialog != null)
            {
                Logger.LogInformation("ÈÉ®ÈñÄÈÅ∏ÊäûÁ¢∫ÂÆö: {DepartmentCode} - {DepartmentName}", 
                    department.DepartmentCode, department.DepartmentName);
                    
                MudDialog.Close(DialogResult.Ok(department));
            }
            else if (department == null)
            {
                Logger.LogWarning("ÈÅ∏Êäû„Åï„Çå„ÅüÈÉ®ÈñÄ„Åånull„Åß„Åô");
                Snackbar.Add("ÈÉ®ÈñÄ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ", Severity.Warning);
            }
            else
            {
                Logger.LogError("MudDialog„Åånull„Åß„Åô");
                Snackbar.Add("„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅÆÂá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "ÈÉ®ÈñÄÈÅ∏ÊäûÁ¢∫ÂÆöÂá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü");
            Snackbar.Add("ÈÅ∏ÊäûÂá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ", Severity.Error);
        }
    }

    /// <summary>
    /// „Ç≠„É£„É≥„Çª„É´Âá¶ÁêÜ
    /// </summary>
    private void Cancel()
    {
        try
        {
            Logger.LogDebug("ÈÉ®ÈñÄÊ§úÁ¥¢„ÉÄ„Ç§„Ç¢„É≠„Ç∞„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü");
            MudDialog?.Cancel();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "„Ç≠„É£„É≥„Çª„É´Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü");
        }
    }
}