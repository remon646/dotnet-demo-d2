@using EmployeeManagement.Domain.Interfaces
@using EmployeeManagement.Domain.Models
@using EmployeeManagement.Domain.Enums
@using EmployeeManagement.Application.Interfaces
@using MudBlazor
@using Microsoft.Extensions.Logging
@inject IEmployeeRepository EmployeeRepository
@inject IEmployeeSearchService EmployeeSearchService
@inject ILogger<EmployeeSearchDialog> Logger
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-width: 800px;">
            <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">
                üîç Á§æÂì°Ê§úÁ¥¢
            </MudText>

            <!-- Ê§úÁ¥¢Êù°‰ª∂ -->
            <MudCard Elevation="2" Class="mb-4">
                <MudCardContent>
                    <MudText Typo="Typo.subtitle1" Color="Color.Primary" Class="mb-3">Ê§úÁ¥¢Êù°‰ª∂</MudText>
                    <MudGrid Spacing="3">
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="searchCriteria.EmployeeNumber"
                                        Label="Á§æÂì°Áï™Âè∑"
                                        Variant="Variant.Outlined"
                                        Adornment="Adornment.Start"
                                        AdornmentIcon="@Icons.Material.Filled.Badge"
                                        Class="mb-2" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="searchCriteria.Name"
                                        Label="Ê∞èÂêç"
                                        Variant="Variant.Outlined"
                                        Adornment="Adornment.Start"
                                        AdornmentIcon="@Icons.Material.Filled.Person"
                                        Class="mb-2" />
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudSelect @bind-Value="searchCriteria.Department"
                                     Label="ÈÉ®ÁΩ≤"
                                     Variant="Variant.Outlined"
                                     AnchorOrigin="Origin.BottomCenter"
                                     Class="mb-2">
                                <MudSelectItem Value="@((Department?)null)">Ôºà„Åô„Åπ„Å¶Ôºâ</MudSelectItem>
                                @foreach (Department dept in Enum.GetValues<Department>())
                                {
                                    <MudSelectItem Value="@((Department?)dept)">@dept.ToDisplayName()</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudSelect @bind-Value="searchCriteria.Position"
                                     Label="ÂΩπËÅ∑"
                                     Variant="Variant.Outlined"
                                     AnchorOrigin="Origin.BottomCenter"
                                     Class="mb-2">
                                <MudSelectItem Value="@((Domain.Enums.Position?)null)">Ôºà„Åô„Åπ„Å¶Ôºâ</MudSelectItem>
                                @foreach (Domain.Enums.Position pos in Enum.GetValues<Domain.Enums.Position>())
                                {
                                    <MudSelectItem Value="@((Domain.Enums.Position?)pos)">@pos.ToDisplayName()</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" Class="text-center">
                            <MudButton Variant="Variant.Filled"
                                     Color="Color.Primary"
                                     StartIcon="@Icons.Material.Filled.Search"
                                     OnClick="SearchEmployees"
                                     Disabled="@isSearching">
                                @if (isSearching)
                                {
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                                    <span>Ê§úÁ¥¢‰∏≠...</span>
                                }
                                else
                                {
                                    <span>Ê§úÁ¥¢</span>
                                }
                            </MudButton>
                            <MudButton Variant="Variant.Outlined"
                                     Color="Color.Secondary"
                                     StartIcon="@Icons.Material.Filled.Clear"
                                     OnClick="ClearSearch"
                                     Class="ml-2">
                                „ÇØ„É™„Ç¢
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>

            <!-- Ê§úÁ¥¢ÁµêÊûú -->
            @if (searchResults != null)
            {
                <MudCard Elevation="2">
                    <MudCardContent>
                        <MudText Typo="Typo.subtitle1" Color="Color.Primary" Class="mb-3">
                            Ê§úÁ¥¢ÁµêÊûú (@searchResults.Count() ‰ª∂)
                        </MudText>
                        
                        @if (searchResults.Any())
                        {
                            <MudDataGrid T="Employee" Items="@searchResults" 
                                       Hover="true" 
                                       RowClick="@RowClickEvent"
                                       SelectedItem="@selectedEmployee"
                                       SelectedItemChanged="@((Employee item) => selectedEmployee = item)"
                                       RowClassFunc="@GetRowClass"
                                       Height="400px"
                                       FixedHeader="true">
                                <Columns>
                                    <PropertyColumn Property="x => x.EmployeeNumber" Title="Á§æÂì°Áï™Âè∑" />
                                    <PropertyColumn Property="x => x.Name" Title="Ê∞èÂêç" />
                                    <PropertyColumn Property="x => x.CurrentDepartmentDisplayName" Title="ÈÉ®ÁΩ≤" />
                                    <PropertyColumn Property="x => x.CurrentPositionDisplayName" Title="ÂΩπËÅ∑" />
                                    <PropertyColumn Property="x => x.Email" Title="Email" />
                                </Columns>
                            </MudDataGrid>
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Info">
                                Ë©≤ÂΩì„Åô„ÇãÁ§æÂì°„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇÊ§úÁ¥¢Êù°‰ª∂„ÇíÂ§âÊõ¥„Åó„Å¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ
                            </MudAlert>
                        }
                    </MudCardContent>
                </MudCard>
            }

            @if (selectedEmployee != null)
            {
                <MudCard Elevation="2" Class="mt-3">
                    <MudCardContent>
                        <MudText Typo="Typo.subtitle1" Color="Color.Success" Class="mb-2">ÈÅ∏Êäû‰∏≠„ÅÆÁ§æÂì°</MudText>
                        <MudAlert Severity="Severity.Success">
                            <div style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.Material.Filled.PersonPin" Class="mr-2" />
                                <div>
                                    <MudText Typo="Typo.body1">
                                        <strong>@selectedEmployee.Name</strong> (@selectedEmployee.EmployeeNumber)
                                    </MudText>
                                    <MudText Typo="Typo.caption" Style="color: gray;">
                                        @selectedEmployee.CurrentDepartmentDisplayName - @selectedEmployee.CurrentPositionDisplayName
                                    </MudText>
                                </div>
                            </div>
                        </MudAlert>
                    </MudCardContent>
                </MudCard>
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Color="Color.Secondary">„Ç≠„É£„É≥„Çª„É´</MudButton>
        <MudButton OnClick="SelectEmployee" 
                 Color="Color.Primary" 
                 Variant="Variant.Filled"
                 Disabled="@(selectedEmployee == null)">
            ÈÅ∏Êäû
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    /// <summary>
    /// MudBlazor„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅÆ„Ç§„É≥„Çπ„Çø„É≥„ÇπÂèÇÁÖßÔºàCascading ParameterÔºâ
    /// </summary>
    [CascadingParameter] 
    public MudBlazor.IDialogReference? MudDialog { get; set; }
    [Parameter] public string Title { get; set; } = "Á§æÂì°ÈÅ∏Êäû";
    [Parameter] public bool AllowClear { get; set; } = true;
    [Parameter] public Employee? SelectedEmployee { get; set; }
    [Parameter] public EmployeeSelectorMode SearchMode { get; set; } = EmployeeSelectorMode.Standard;

    private SearchCriteria searchCriteria = new();
    
    private IEnumerable<Employee>? searchResults = null;
    private Employee? selectedEmployee = null;
    private bool isSearching = false;

    protected override async Task OnInitializedAsync()
    {
        // MudDialog Cascading Parameter „ÅÆË®∫Êñ≠„É≠„Ç∞
        Logger.LogInformation("EmployeeSearchDialog initializing - MudDialog reference: {IsNull}", 
            MudDialog == null ? "NULL" : "OK");
        
        if (MudDialog != null)
        {
            Logger.LogInformation("MudDialog successfully injected with type: {DialogType}", MudDialog.GetType().Name);
        }
        
        // ÂàùÊúüÈÅ∏ÊäûÁä∂ÊÖã„ÅÆË®≠ÂÆö
        selectedEmployee = SelectedEmployee;
        
        // „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©Âåñ: ÂàùÊúüÂåñÊôÇ„ÅØÊ§úÁ¥¢ÁµêÊûú„ÇíÁ©∫„Å´„Åó„ÄÅ„É¶„Éº„Ç∂„Éº„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÂæÖ„Å§
        searchResults = Enumerable.Empty<Employee>();
        
        if (SelectedEmployee != null)
        {
            // Êó¢Â≠òÈÅ∏Êäû„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„Åø„Åù„ÅÆÊÉÖÂ†±„ÇíË°®Á§∫
            searchResults = new[] { SelectedEmployee };
        }
    }


    private async Task SearchEmployees()
    {
        isSearching = true;
        
        try
        {
            // Ê§úÁ¥¢„É¢„Éº„Éâ„Å´Âøú„Åò„Å¶ÈÅ©Âàá„Å™Ê§úÁ¥¢ÊñπÊ≥ï„ÇíÈÅ∏Êäû
            if (SearchMode == EmployeeSelectorMode.ManagerOnly)
            {
                // Ë≤¨‰ªªËÄÖÂÄôË£ú„ÅÆ„Åø„ÇíÊ§úÁ¥¢
                var keyword = string.IsNullOrWhiteSpace(searchCriteria.EmployeeNumber) && string.IsNullOrWhiteSpace(searchCriteria.Name) 
                    ? "" 
                    : $"{searchCriteria.EmployeeNumber} {searchCriteria.Name}".Trim();
                
                searchResults = await EmployeeSearchService.SearchEligibleManagersAsync(keyword, 1000);
                
                // ËøΩÂä†„Éï„Ç£„É´„Çø„É™„É≥„Ç∞ÔºàÈÉ®ÈñÄ„ÉªÂΩπËÅ∑Ôºâ
                if (searchCriteria.Department.HasValue || searchCriteria.Position.HasValue)
                {
                    searchResults = searchResults.Where(emp =>
                        (!searchCriteria.Department.HasValue || emp.CurrentDepartment == searchCriteria.Department.Value) &&
                        (!searchCriteria.Position.HasValue || emp.CurrentPosition == searchCriteria.Position.Value)
                    );
                }
            }
            else
            {
                // Ê®ôÊ∫ñÊ§úÁ¥¢ÔºàÂÖ®Á§æÂì°ÂØæË±°Ôºâ
                var criteria = new EmployeeSearchCriteria
                {
                    EmployeeNumber = searchCriteria.EmployeeNumber,
                    Name = searchCriteria.Name,
                    ActiveOnly = true
                };

                if (criteria.IsEmpty)
                {
                    // Ê§úÁ¥¢Êù°‰ª∂„ÅåÁ©∫„ÅÆÂ†¥Âêà„ÅØÂÖ®Á§æÂì°„ÇíÂèñÂæó
                    var allEmployees = await EmployeeRepository.GetAllAsync();
                    searchResults = allEmployees.Where(emp =>
                        (!searchCriteria.Department.HasValue || emp.CurrentDepartment == searchCriteria.Department.Value) &&
                        (!searchCriteria.Position.HasValue || emp.CurrentPosition == searchCriteria.Position.Value)
                    ).OrderBy(emp => emp.EmployeeNumber);
                }
                else
                {
                    var detailedResults = await EmployeeSearchService.SearchDetailedAsync(criteria);
                    
                    // ÈÉ®ÈñÄ„ÉªÂΩπËÅ∑„Éï„Ç£„É´„ÇøËøΩÂä†
                    searchResults = detailedResults.Where(emp =>
                        (!searchCriteria.Department.HasValue || emp.CurrentDepartment == searchCriteria.Department.Value) &&
                        (!searchCriteria.Position.HasValue || emp.CurrentPosition == searchCriteria.Position.Value)
                    ).OrderBy(emp => emp.EmployeeNumber);
                }
            }
        }
        catch (Exception ex)
        {
            // „Çª„Ç≠„É•„Ç¢„Å™„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
            searchResults = Enumerable.Empty<Employee>();
            Logger.LogError(ex, "Employee search failed for mode {SearchMode}", SearchMode);
            Snackbar.Add("Á§æÂì°Ê§úÁ¥¢‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„Åó„Å∞„Çâ„ÅèÊôÇÈñì„Çí„Åä„ÅÑ„Å¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ", Severity.Error);
        }
        finally
        {
            isSearching = false;
            StateHasChanged(); // ‰∏ÄÂ∫¶„ÅÆÂëº„Å≥Âá∫„Åó„ÅßÂçÅÂàÜ
        }
    }

    private void ClearSearch()
    {
        searchCriteria = new SearchCriteria();
        selectedEmployee = null;
        searchResults = null;
        StateHasChanged();
    }

    private void RowClickEvent(DataGridRowClickEventArgs<Employee> args)
    {
        selectedEmployee = args.Item;
        StateHasChanged();
    }

    /// <summary>
    /// ÈÅ∏Êäû„Åï„Çå„ÅüË°å„Å´CSS„ÇØ„É©„Çπ„ÇíÈÅ©Áî®„Åô„Çã„Åü„ÇÅ„ÅÆ„É°„ÇΩ„ÉÉ„Éâ
    /// ÈÅ∏Êäû‰∏≠„ÅÆÁ§æÂì°Ë°å„Å´Ë¶ñË¶öÁöÑ„Éè„Ç§„É©„Ç§„Éà„ÇíÊèê‰æõ
    /// </summary>
    /// <param name="employee">ÂØæË±°„ÅÆÁ§æÂì°„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà</param>
    /// <param name="rowIndex">Ë°å„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ</param>
    /// <returns>ÈÅ©Áî®„Åô„ÇãCSS„ÇØ„É©„ÇπÂêç</returns>
    private string GetRowClass(Employee employee, int rowIndex)
    {
        // ÈÅ∏Êäû‰∏≠„ÅÆÁ§æÂì°„Å®‰∏ÄËá¥„Åô„ÇãÂ†¥Âêà„ÅØ„Éè„Ç§„É©„Ç§„Éà„ÇØ„É©„Çπ„ÇíÈÅ©Áî®
        return selectedEmployee != null && selectedEmployee.EmployeeNumber == employee.EmployeeNumber
            ? "employee-search-selected-row"
            : string.Empty;
    }

    /// <summary>
    /// Á§æÂì°ÈÅ∏ÊäûÊôÇ„ÅÆÂá¶ÁêÜ
    /// „ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÇíÈñâ„Åò„Å¶ÈÅ∏Êäû„Åï„Çå„ÅüÁ§æÂì°„ÇíËøî„Åô
    /// </summary>
    private void SelectEmployee()
    {
        if (selectedEmployee == null)
        {
            Logger.LogWarning("SelectEmployee called but no employee was selected");
            Snackbar.Add("Á§æÂì°„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ", Severity.Warning);
            return;
        }

        try
        {
            Logger.LogInformation("Employee selected: {EmployeeNumber} - {Name}", 
                selectedEmployee.EmployeeNumber, selectedEmployee.Name);

            // MudDialog „Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅÆ null „ÉÅ„Çß„ÉÉ„ÇØ„Å®„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
            if (MudDialog == null)
            {
                Logger.LogError("MudDialog cascading parameter is null - dialog cannot be closed properly");
                Snackbar.Add("„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅÆÂá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ", Severity.Error);
                return;
            }

            // „ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÇíÊ≠£Â∏∏ÁµÇ‰∫Ü„Å®„Åó„Å¶Èñâ„Åò„Çã
            MudDialog.Close(DialogResult.Ok(selectedEmployee));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error occurred while closing dialog with selected employee {EmployeeNumber}", 
                selectedEmployee.EmployeeNumber);
            Snackbar.Add("ÈÅ∏ÊäûÂá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ", Severity.Error);
        }
    }

    /// <summary>
    /// „ÉÄ„Ç§„Ç¢„É≠„Ç∞„Ç≠„É£„É≥„Çª„É´ÊôÇ„ÅÆÂá¶ÁêÜ
    /// „ÉÄ„Ç§„Ç¢„É≠„Ç∞„Çí„Ç≠„É£„É≥„Çª„É´Áä∂ÊÖã„ÅßÈñâ„Åò„Çã
    /// </summary>
    private void Cancel()
    {
        try
        {
            Logger.LogInformation("Employee search dialog cancelled");

            // MudDialog „Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅÆ null „ÉÅ„Çß„ÉÉ„ÇØ„Å®„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
            if (MudDialog == null)
            {
                Logger.LogError("MudDialog cascading parameter is null - dialog cannot be closed properly");
                Snackbar.Add("„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÅÆÂá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ", Severity.Error);
                return;
            }

            // „ÉÄ„Ç§„Ç¢„É≠„Ç∞„Çí„Ç≠„É£„É≥„Çª„É´Áä∂ÊÖã„ÅßÈñâ„Åò„Çã
            MudDialog.Close(DialogResult.Cancel());
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error occurred while cancelling dialog");
            Snackbar.Add("„Ç≠„É£„É≥„Çª„É´Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ", Severity.Error);
        }
    }


    private class SearchCriteria
    {
        public string EmployeeNumber { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public Department? Department { get; set; } = null;
        public Domain.Enums.Position? Position { get; set; } = null;
    }
}